package calc;

import java.util.*;

import static java.lang.Double.NaN;
import static java.lang.Math.pow;


/*
 *   A calculator for rather simple arithmetic expressions
 *
 *   This is not the program, it's a class declaration (with methods) in it's
 *   own file (which must be named Calculator.java)
 *
 *   NOTE:
 *   - No negative numbers implemented
 */
class Calculator {

    // Here are the only allowed instance variables!
    // Error messages (more on static later)
    final static String MISSING_OPERAND = "Missing or bad operand";
    final static String DIV_BY_ZERO = "Division with 0";
    final static String MISSING_OPERATOR = "Missing operator or parenthesis";
    final static String OP_NOT_FOUND = "Operator not found";

    // Definition of operators
    final static String OPERATORS = "+-*/^";

    // Method used in REPL
    double eval(String expr) {
        if (expr.length() == 0) {
            return NaN;
        }
        List<String> tokens = tokenize(expr);
        List<String> postfix = infix2Postfix(tokens);
        return evalPostfix(postfix);
    }

    // ------  Evaluate RPN expression -------------------

    public double evalPostfix(List<String> postfix) {

        Stack<Double> stack = new Stack<>();

        for (int i = 0; i < postfix.size(); i++) {

            if (OPERATORS.contains(postfix.get(i))) {
                double x = stack.pop();
                double y = stack.pop();
                stack.push(applyOperator(postfix.get(i), x, y));
            } else {
                stack.push(Double.parseDouble(postfix.get(i)));
            }

        }

        if (stack.size() == 1) {
            return stack.pop();
        } else {
            return -1;
        }

    }

    double applyOperator(String op, double d1, double d2) {
        switch (op) {
            case "+":
                return d1 + d2;
            case "-":
                return d2 - d1;
            case "*":
                return d1 * d2;
            case "/":
                if (d1 == 0) {
                    throw new IllegalArgumentException(DIV_BY_ZERO);
                }
                return d2 / d1;
            case "^":
                return pow(d2, d1);
        }
        throw new RuntimeException(OP_NOT_FOUND);
    }

    // ------- Infix 2 Postfix ------------------------

    public List<String> infix2Postfix(List<String> tokens) {

        Stack<String> operators = new Stack<>();
        List<String> postFix = new ArrayList<>();

        for (int i = 0; i < tokens.size(); i++) {

            if (isDigit(tokens.get(i))) {
                postFix.add(tokens.get(i));
            } else if (tokens.get(i).equals("(")) {
                operators.push(tokens.get(i));
            } else if (tokens.get(i).equals(")")) {
                popStack(postFix, tokens, operators, i);
            } else {

                try {

                    if (operators.peek().equals("(")) {
                        operators.push(tokens.get(i));
                    } else if (getPrecedence(tokens.get(i)) > getPrecedence(operators.peek())) {
                        operators.push(tokens.get(i));
                    } else {
                        popStack(postFix, tokens, operators, i);
                    }


                } catch (EmptyStackException e) {
                    operators.push(tokens.get(i));
                }
            }
        }
        popRemaining(postFix, operators);
        return postFix;
    }


    int getPrecedence(String op) {
        if ("+-".contains(op)) {
            return 2;
        } else if ("*/".contains(op)) {
            return 3;
        } else if ("^".contains(op)) {
            return 4;
        } else {
            throw new RuntimeException(OP_NOT_FOUND);
        }
    }

    Assoc getAssociativity(String op) {
        if ("+-*/".contains(op)) {
            return Assoc.LEFT;
        } else if ("^".contains(op)) {
            return Assoc.RIGHT;
        } else {
            throw new RuntimeException(OP_NOT_FOUND);
        }
    }

    enum Assoc {
        LEFT,
        RIGHT
    }

    // ---------- Tokenize -----------------------

    public List<String> tokenize(String expr) {

        List<String> tokens = new ArrayList<>();
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < expr.length(); i++) {

            if (!Character.isWhitespace(expr.charAt(i)) && Character.isDigit(expr.charAt(i))) {
                sb.append((expr.charAt(i)));

            } else if (!Character.isWhitespace(expr.charAt(i)) && !Character.isDigit(expr.charAt(i))) {

                if (!sb.toString().isEmpty()) {
                    tokens.add(sb.toString());
                    sb.setLength(0);
                }

                tokens.add(Character.toString(expr.charAt(i)));

            }

        }

        if (!sb.toString().isEmpty()) {
            tokens.add(sb.toString());
        }

        return tokens;

    }

    // TODO Possibly more methods

    boolean isDigit(String string) {
        return string.chars().allMatch(Character::isDigit);
    }

    void popRemaining(List<String> postFix, Stack<String> stack) {

        while (!stack.empty()) {
            postFix.add(stack.pop());
        }

    }

    void popStack(List<String> postFix, List<String> tokens, Stack<String> stack, int index) {

        switch (tokens.get(index)) {
            case ")":
                while (true) {
                    if (!stack.peek().equals("(")) {
                        postFix.add(stack.pop());
                    } else {
                        stack.pop();
                        break;
                    }
                }
                break;

            default:
                while (true) {
                    if (getPrecedence(stack.peek()) >= getPrecedence(tokens.get(index)))
                        postFix.add(stack.pop());
                    else {
                        break;
                    }
                }
        }
    }
}
